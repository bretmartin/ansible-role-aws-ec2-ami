---

- name: set global facts
  set_fact:
    _aws_ec2_ami_url: >-
      https://console.aws.amazon.com/ec2/v2/home?region={{ aws_region }}#Images
    _aws_vpc_url: >-
      https://console.aws.amazon.com/ec2/v2/home?region={{
        aws_region }}#Instances:tag:VPC={{ aws_vpc_name }}

- name: set target AMI fact
  set_fact:
    _aws_ec2_ami: >
      {{ aws_ec2_ami_ami.split(",")
         if aws_ec2_ami_ami is defined else [""]
         | sort }}

- name: set all configured AMIs fact
  set_fact:
    _aws_ec2_ami_all: >-
      {{ _aws_ec2_ami_all
         | default([])
         | union([item | basename | splitext | first]) }}
  with_fileglob: 'host_vars/{{ inventory_hostname }}/ec2-ami/*.yml'
  loop_control:
    label: '{{ item | basename | splitext | first }}'

- name: call optional notifier
  include_tasks: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      started running role <b>aws-ec2-ami</b>
      on <a href="{{ _aws_ec2_ami_url }}">account {{ aws_profile }}</a>{%
      if _aws_ec2_ami != [""]
      -%}, AMI {% for a in _aws_ec2_ami -%}
      <b>{{ a }}</b>{%
      if not loop.last -%}, {% endif -%}{% endfor -%}{% endif -%}
  when: notifier_role is defined

- name: set default target AMI fact
  set_fact:
    _aws_ec2_ami: '{{ _aws_ec2_ami_all }}'
  when: '_aws_ec2_ami == [""]'

- name: initialize lists of instances and AMIs to encrypt
  set_fact:
    _aws_ec2_ami_instances: []
    _aws_ec2_ami_amis_to_encrypt: []

- name: find source AMIs and determine what temporary instances are required
  include_tasks: instances.yml
  vars:
    _aws_ec2_ami_file: >-
      host_vars/{{ inventory_hostname }}/ec2-ami/{{ ami }}.yml
  with_items: '{{ _aws_ec2_ami | difference(["defaults"]) }}'
  loop_control:
    loop_var: ami

- include_role:
    name: aws-vpc
    tasks_from: vpc_id

- name: launch temporary instances
  include_role:
    name: aws-ec2
    tasks_from: instance
  vars:
    _aws_ec2_i: '{{ item }}'
  with_items: '{{ _aws_ec2_ami_instances }}'

- name: initialize unencrypted AMI list
  set_fact:
    _aws_ec2_ami_unencrypted_amis: []

- name: create unencrypted AMIs
  include_tasks: ami.yml
  vars:
    instance: '{{ item }}'
  with_items: '{{ _aws_ec2_ami_instances }}'

- name: find unencrypted AMIs, waiting for them to be available
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption
    filters:
      state: available
    image_id: '{{ _aws_ec2_ami_unencrypted_ami.image_id }}'
    region: '{{ aws_region }}'
  register: _aws_ec2_ami_unencrypted_amis_available
  until: _aws_ec2_ami_unencrypted_amis_available.images | length == 1
  retries: 720
  delay: 15
  with_items: '{{ _aws_ec2_ami_unencrypted_amis }}'
  loop_control:
    label: '{{ _aws_ec2_ami_unencrypted_ami.tags["Short Name"] }}'
    loop_var: _aws_ec2_ami_unencrypted_ami

- name: refresh assumed role credentials
  include_role:
    name: aws-iam-assume-role

- name: terminate temporary instances
  include_tasks: instances_terminate.yml
  vars:
    instance: '{{ item }}'
  with_items: '{{ _aws_ec2_ami_instances }}'

- name: create encrypted AMIs
  include_tasks: amis_encrypted.yml

- name: call optional notifier
  include_tasks: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      finished running role <b>aws-ec2-ami</b>
      on <a href="{{ _aws_ec2_ami_url }}">account {{ aws_profile }}</a>
  when: notifier_role is defined
