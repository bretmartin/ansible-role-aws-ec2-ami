---

- name: find AMIs to be encrypted, waiting for expected number to be available
  ec2_ami_find:
    profile: '{{ aws_profile }}'
    region: '{{ aws_region }}'
    ami_tags:
      To Encrypt: "True"
    state: available
  register: _aws_ec2_ami_amis_to_encrypt_available
  until: >
    ( _aws_ec2_ami_amis_to_encrypt_available.results | length )
    ==
    ( _aws_ec2_ami_amis_to_encrypt | length )
  retries: 40
  delay: 15

- name: 
  set_fact:
    _aws_ec2_ami_intermediate_amis: >
      {{ _aws_ec2_ami_amis_to_encrypt_available.results }}

- name: 'copy to encrypted AMI'
  ec2_ami_copy:
    profile: '{{ aws_profile }}'
    region: '{{ aws_region }}'
    source_region: '{{ aws_region }}'
    source_image_id: '{{ item.ami_id }}'
    name: >-
      {{ item.name
         | regex_replace("\[h3 to-encrypt\]", "[h3 encrypted]") }}
    description: >-
      {{ item.description
         | regex_replace("\[h3 to-encrypt\]", "[h3 encrypted]") }}
    encrypted: yes
    kms_key_id: '{{ item.tags["KMS Key Alias"] }}'
    tags:
      Source AMI ID: '{{ item.tags["Source AMI ID"] }}'
      To Encrypt: "False"
    wait: yes
  async: 7200
  poll: 0
  with_items: '{{ _aws_ec2_ami_intermediate_amis }}'
  register: _aws_ec2_ami_copy

- name: call optional notifier
  include: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      began encrypting
      AMI{% if _aws_ec2_ami_intermediate_amis.__len__() != 1 %}s{% endif %}
      <br/>
      {% for ami in _aws_ec2_ami_intermediate_amis -%}
      <b>{{ ami.name }}</b>
      (<a href="{{ _aws_ec2_ami_url }}:imageId={{ ami.ami_id }}">{{
        ami.ami_id }}</a>)
      {%- if not loop.last %},<br/>{% endif -%}
      {% endfor %}
  when: >
    notifier_role is defined and
    _aws_ec2_ami_intermediate_amis

- name: wait for AMI encryption to complete
  async_status: jid={{ item.ansible_job_id }}
  register: _aws_ec2_ami_jobs
  until: _aws_ec2_ami_jobs.finished
  retries: 300
  delay: 10
  with_items: '{{ _aws_ec2_ami_copy.results }}'

- name: destroy unencrypted versions of encrypted AMIs
  ec2_ami:
    profile: '{{ aws_profile }}'
    region: '{{ aws_region }}'
    image_id: '{{ item.ami_id }}'
    state: absent
    delete_snapshot: True
  with_items: '{{ _aws_ec2_ami_intermediate_amis }}'

- name: call optional notifier
  include: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      destroyed unencrypted
      AMI{% if _aws_ec2_ami_intermediate_amis.__len__() != 1 %}s{% endif %}
      <br/>
      {% for ami in _aws_ec2_ami_intermediate_amis -%}
      <b>{{ ami.name }}</b> ({{ ami.ami_id }})
      {%- if not loop.last %},<br/>{% endif -%}
      {% endfor %}
  when: >
    notifier_role is defined and
    _aws_ec2_ami_intermediate_amis
