---

- name: wait for none of the AMIs to be encrypted to be "pending"
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption
    filters:
      state: pending
      'tag:To Encrypt': 'True'
    region: '{{ aws_region }}'
  register: _aws_ec2_ami_amis_to_encrypt_pending
  until: _aws_ec2_ami_amis_to_encrypt_pending.images | length == 0
  retries: 720
  delay: 15

- name: refresh assumed role credentials
  include_role:
    name: aws-iam-assume-role

- name: find intermediate AMIs awaiting encryption
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption
    filters:
      state: available
      'tag:To Encrypt': 'True'
    region: '{{ aws_region }}'
  register: _aws_ec2_ami_amis_to_encrypt_available

- name: set intermediate AMIs fact
  set_fact:
    _aws_ec2_ami_intermediate_amis: >
      {{ _aws_ec2_ami_amis_to_encrypt_available.images }}

- name: 'copy to encrypted AMI'
  ec2_ami_copy:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption

    region: '{{ aws_region }}'
    source_region: '{{ aws_region }}'
    source_image_id: '{{ item.image_id }}'
    name: >-
      {{
        item.name
        | regex_replace(
            "\[" + aws_ec2_ami_organization_shortname + " (.+) to-encrypt\]",
             "[" + aws_ec2_ami_organization_shortname + " \1 encrypted]"
          )
      }}
    description: >-
      {{
        item.description
        | regex_replace(
            "\[" + aws_ec2_ami_organization_shortname + " (.+) to-encrypt\]",
             "[" + aws_ec2_ami_organization_shortname + " \1 encrypted]"
          )
      }}
    encrypted: yes
    kms_key_id: '{{ item.tags["KMS Key Alias"] }}'
    tags:
      Source AMI ID: '{{ item.tags["Source AMI ID"] }}'
      To Encrypt: "False"
  with_items: '{{ _aws_ec2_ami_intermediate_amis }}'
  register: _aws_ec2_ami_copy
  loop_control:
    label: '{{ item.tags["Short Name"] }}'

- name: call optional notifier
  include_tasks: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      began encrypting
      AMI{% if _aws_ec2_ami_intermediate_amis.__len__() != 1 %}s{% endif %}
      <br/>
      {% for ami in _aws_ec2_ami_intermediate_amis -%}
      <b>{{ ami.name }}</b>
      (<a href="{{ _aws_ec2_ami_url }}:imageId={{ ami.image_id }}">{{
        ami.image_id }}</a>)
      {%- if not loop.last %},<br/>{% endif -%}
      {% endfor %}
  when: >
    notifier_role is defined and
    _aws_ec2_ami_intermediate_amis

- name: find encrypted AMIs, waiting for expected ones to be available
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption
    filters:
      state: available
    image_id: '{{ item.image_id }}'
    region: '{{ aws_region }}'
  register: _aws_ec2_ami_encrypted_amis
  until: _aws_ec2_ami_encrypted_amis.images | length == 1
  retries: 720
  delay: 15
  with_items: '{{ _aws_ec2_ami_copy.results }}'
  loop_control:
    label: '{{ _aws_ec2_ami_encrypted_amis.item.item.tags["Short Name"] }}'

- name: destroy unencrypted versions of encrypted AMIs
  ec2_ami:
    profile:        '{{ aws_profile }}'
    aws_access_key: '{{ aws_iam_assume_role_access_key    | default(omit) }}'
    aws_secret_key: '{{ aws_iam_assume_role_secret_key    | default(omit) }}'
    security_token: '{{ aws_iam_assume_role_session_token | default(omit) }}'

    region: '{{ aws_region }}'
    image_id: '{{ item.image_id }}'
    state: absent
    delete_snapshot: True
  with_items: '{{ _aws_ec2_ami_intermediate_amis }}'
  loop_control:
    label: '{{ item.tags["Short Name"] }}'

- name: call optional notifier
  include_tasks: 'roles/{{ notifier_role }}/tasks/main.yml'
  vars:
    message: >
      destroyed unencrypted
      AMI{% if _aws_ec2_ami_intermediate_amis.__len__() != 1 %}s{% endif %}
      <br/>
      {% for ami in _aws_ec2_ami_intermediate_amis -%}
      <b>{{ ami.name }}</b> ({{ ami.image_id }})
      {%- if not loop.last %},<br/>{% endif -%}
      {% endfor %}
  when: >
    notifier_role is defined and
    _aws_ec2_ami_intermediate_amis
