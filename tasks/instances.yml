---

- name: set AMI short name fact
  set_fact:
    _aws_ec2_ami_shortname: >-
      {{ _aws_ec2_ami_file | basename | splitext | first }}

- name: read variables for AMI '{{ _aws_ec2_ami_shortname }}'
  include_vars: '{{ _aws_ec2_ami_file }}'

- name: find source AMI
  ec2_ami_find:
    profile:        '{{ aws_profile }}'
    aws_access_key: '{{ aws_iam_assume_role_access_key    | default(omit) }}'
    aws_secret_key: '{{ aws_iam_assume_role_secret_key    | default(omit) }}'
    security_token: '{{ aws_iam_assume_role_session_token | default(omit) }}'

    region: '{{ aws_region }}'
    architecture: >-
      {{ aws_ec2_ami.source_ami_filters.architecture        | default(None) }}
    hypervisor: >-
      {{ aws_ec2_ami.source_ami_filters.hypervisor          | default(None) }}
    is_public: >-
      {{ aws_ec2_ami.source_ami_filters.is_public           | default(None) }}
    name: >-
      {{ aws_ec2_ami.source_ami_filters.name                | default(None) }}
    owner: >-
      {{ aws_ec2_ami.source_ami_filters.owner               | default(None) }}
    platform: >-
      {{ aws_ec2_ami.source_ami_filters.platform            | default(None) }}
    sort: >-
      {{ aws_ec2_ami.source_ami_filters.sort                | default(None) }}
    sort_order: >-
      {{ aws_ec2_ami.source_ami_filters.sort_order          | default(None) }}
    state: >-
      {{ aws_ec2_ami.source_ami_filters.state               | default(None) }}
    virtualization_type: >-
      {{ aws_ec2_ami.source_ami_filters.virtualization_type | default(None) }}
  register: _aws_ec2_ami_source

- name: find intermediate AMI (if applicable, if it already exists)
  ec2_ami_find:
    profile:        '{{ aws_profile }}'
    aws_access_key: '{{ aws_iam_assume_role_access_key    | default(omit) }}'
    aws_secret_key: '{{ aws_iam_assume_role_secret_key    | default(omit) }}'
    security_token: '{{ aws_iam_assume_role_session_token | default(omit) }}'

    owner: '{{ aws_account }}'
    region: '{{ aws_region }}'
    ami_tags:
      Source AMI ID: '{{ _aws_ec2_ami_source.results.0.ami_id }}'
    architecture: >-
      {{ aws_ec2_ami.source_ami_filters.architecture        | default(None) }}
    hypervisor: >-
      {{ aws_ec2_ami.source_ami_filters.hypervisor          | default(None) }}
    name: >-
      {{
        _aws_ec2_ami_source.results.0.name +
        ' [' +
        aws_ec2_ami_organization_shortname +
        ' ' +
        _aws_ec2_ami_shortname +
        ' to-encrypt]'
      }}
    platform: >-
      {{ aws_ec2_ami.source_ami_filters.platform            | default(None) }}
    sort: >-
      {{ aws_ec2_ami.source_ami_filters.sort                | default(None) }}
    sort_order: >-
      {{ aws_ec2_ami.source_ami_filters.sort_order          | default(None) }}
    state: >-
      {{ aws_ec2_ami.source_ami_filters.state               | default(None) }}
    virtualization_type: >-
      {{ aws_ec2_ami.source_ami_filters.virtualization_type | default(None) }}
  register: _aws_ec2_ami_intermediate

- name: find target AMI (if it already exists)
  ec2_ami_find:
    profile:        '{{ aws_profile }}'
    aws_access_key: '{{ aws_iam_assume_role_access_key    | default(omit) }}'
    aws_secret_key: '{{ aws_iam_assume_role_secret_key    | default(omit) }}'
    security_token: '{{ aws_iam_assume_role_session_token | default(omit) }}'

    owner: '{{ aws_account }}'
    region: '{{ aws_region }}'
    ami_tags:
      Source AMI ID: '{{ _aws_ec2_ami_source.results.0.ami_id }}'
    architecture: >-
      {{ aws_ec2_ami.source_ami_filters.architecture        | default(None) }}
    hypervisor: >-
      {{ aws_ec2_ami.source_ami_filters.hypervisor          | default(None) }}
    name: >-
      {{
        _aws_ec2_ami_source.results.0.name +
        ' [' +
        aws_ec2_ami_organization_shortname +
        ' ' +
        _aws_ec2_ami_shortname +
        (' encrypted]' if 'kms_key_alias' in aws_ec2_ami else ']')
      }}
    platform: >-
      {{ aws_ec2_ami.source_ami_filters.platform            | default(None) }}
    sort: >-
      {{ aws_ec2_ami.source_ami_filters.sort                | default(None) }}
    sort_order: >-
      {{ aws_ec2_ami.source_ami_filters.sort_order          | default(None) }}
    state: >-
      {{ aws_ec2_ami.source_ami_filters.state               | default(None) }}
    virtualization_type: >-
      {{ aws_ec2_ami.source_ami_filters.virtualization_type | default(None) }}
  register: _aws_ec2_ami_target

- name: add instance to those to be configured if target doesn't exist
  set_fact:
    _aws_ec2_ami_instances: >-
      {{ _aws_ec2_ami_instances
         | default([])
         | union([
                  aws_ec2_ami.build_instance
                  | combine({
                             'ami_description':
                               _aws_ec2_ami_source.results.0.description +
                               ' [' +
                               aws_ec2_ami_organization_shortname +
                               (' to-encrypt]'
                                if 'kms_key_alias' in aws_ec2_ami
                                else ']'),
                             'ami_name':
                               _aws_ec2_ami_source.results.0.name +
                               ' [' +
                               aws_ec2_ami_organization_shortname +
                               ' ' +
                               _aws_ec2_ami_shortname +
                               (' to-encrypt]'
                                if 'kms_key_alias' in aws_ec2_ami
                                else ']'),
                             'description':
                               _aws_ec2_ami_shortname +
                               ' AMI build',
                             'ami_shortname': _aws_ec2_ami_shortname,
                             'image': _aws_ec2_ami_source.results.0.ami_id,
                             'hostname': 'ami-build-' + _aws_ec2_ami_shortname,
                             'environment': 'ami',
                             'ami_kms_key_alias':
                               aws_ec2_ami.kms_key_alias | default(None),
                             'ami_platform':
                               _aws_ec2_ami_source.results.0.platform,
                            })
                 ])
      }}
  when: >
    (('kms_key_alias' in aws_ec2_ami) and
     (_aws_ec2_ami_intermediate.results == []) and
     (_aws_ec2_ami_target.results == []))
    or
    (('kms_key_alias' not in aws_ec2_ami) and
     (_aws_ec2_ami_target.results == []))

- name: add AMI to to-be-encrypted list (if applicable, if target doesn't exist)
  set_fact:
    _aws_ec2_ami_amis_to_encrypt: >-
      {{ _aws_ec2_ami_amis_to_encrypt
         | default([])
         | union([_aws_ec2_ami_shortname]) }}
  when: >
    ('kms_key_alias' in aws_ec2_ami) and
    (_aws_ec2_ami_target.results == [])
