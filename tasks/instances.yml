---

- name: set AMI short name fact
  set_fact:
    _aws_ec2_ami_shortname: >-
      {{ _aws_ec2_ami_file | basename | splitext | first }}

- name: read variables for AMI '{{ _aws_ec2_ami_shortname }}'
  include_vars: '{{ _aws_ec2_ami_file }}'

- name: find source AMI
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption

    filters: '{{ aws_ec2_ami.source_ami_filters }}'
    owner:   '{{ aws_ec2_ami.source_ami_owner | default(omit) }}'

    region: '{{ aws_region }}'
  register: _aws_ec2_ami_facts_source

- name: set source AMI fact
  set_fact:
    _aws_ec2_ami_source: >-
      {{
        _aws_ec2_ami_facts_source.images
        | sort(attribute=(aws_ec2_ami.source_ami_sort_attribute
                          | default("creation_date")),
                 reverse=(aws_ec2_ami.source_ami_sort_reverse
                          | default(True)))
        | first
      }}

- name: set intermediate AMI filters fact
  set_fact:
    _aws_ec2_ami_intermediate_ami_filters: >-
      {{
        aws_ec2_ami.source_ami_filters
        | combine({"name": _aws_ec2_ami_source
                           [aws_ec2_ami.source_ami_field_for_name_prefix
                            | default('name')] +
                           ' [' +
                           aws_ec2_ami_organization_shortname +
                           ' ' +
                           _aws_ec2_ami_shortname +
                           ' to-encrypt]'})
        | combine({"tag:Source AMI ID": _aws_ec2_ami_source.image_id})
      }}

- name: find intermediate AMI (if applicable, if it already exists)
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption

    filters: '{{ _aws_ec2_ami_intermediate_ami_filters }}'
    owner:   '{{ aws_account }}'

    region: '{{ aws_region }}'
  register: _aws_ec2_ami_facts_intermediate

- name: set intermediate AMI fact
  set_fact:
    _aws_ec2_ami_intermediate: >-
      {{
        _aws_ec2_ami_facts_intermediate.images
        | sort(attribute="creation_date", reverse=True)
        | first
      }}
  when: _aws_ec2_ami_facts_intermediate.images != []

- name: set target AMI filters fact
  set_fact:
    _aws_ec2_ami_target_ami_filters: >-
      {{
        aws_ec2_ami.source_ami_filters
        | combine({"name": _aws_ec2_ami_source
                           [aws_ec2_ami.source_ami_field_for_name_prefix
                            | default('name')] +
                           ' [' +
                           aws_ec2_ami_organization_shortname +
                           ' ' +
                           _aws_ec2_ami_shortname +
                           (' encrypted]'
                            if 'kms_key_alias' in aws_ec2_ami else ']')})
        | combine({"tag:Source AMI ID": _aws_ec2_ami_source.image_id})
      }}

- name: find target AMI (if it already exists)
  ec2_ami_facts:
    profile: '{{ aws_profile }}'
    # this Ansible module supports automatic role assumption

    filters: '{{ _aws_ec2_ami_target_ami_filters }}'
    owner:   '{{ aws_account }}'

    region: '{{ aws_region }}'
  register: _aws_ec2_ami_facts_target

- name: set target AMI fact
  set_fact:
    _aws_ec2_ami_target: >-
      {{
        _aws_ec2_ami_facts_target.images
        | sort(attribute="creation_date", reverse=True)
        | first
      }}
  when: _aws_ec2_ami_facts_target.images != []

- name: add instance to those to be configured if target doesn't exist
  set_fact:
    _aws_ec2_ami_instances: >-
      {{
        (_aws_ec2_ami_instances | default([])) +
        [(aws_ec2_instance_defaults
          | combine(aws_ec2_ami.build_instance)
          | combine({
                     'ami_description':
                       _aws_ec2_ami_source.description +
                       ' [' +
                       aws_ec2_ami_organization_shortname +
                       ' ' +
                       _aws_ec2_ami_shortname +
                       (' to-encrypt]'
                        if 'kms_key_alias' in aws_ec2_ami
                        else ']'),
                     'ami_name':
                       _aws_ec2_ami_source
                         [aws_ec2_ami.source_ami_field_for_name_prefix
                          | default('name')] +
                       ' [' +
                       aws_ec2_ami_organization_shortname +
                       ' ' +
                       _aws_ec2_ami_shortname +
                       (' to-encrypt]'
                        if 'kms_key_alias' in aws_ec2_ami
                        else ']'),
                     'description':
                       _aws_ec2_ami_shortname +
                       ' AMI build',
                     'ami_shortname': _aws_ec2_ami_shortname,
                     'image': _aws_ec2_ami_source.image_id,
                     'hostname': 'ami-build-' + _aws_ec2_ami_shortname,
                     'environment': 'ami',
                     'ami_kms_key_alias':
                       aws_ec2_ami.kms_key_alias | default(None),
                     'ami_platform':
                       (_aws_ec2_ami_source.platform | default("linux"))
                    })
        )]
      }}
  when: >
    (('kms_key_alias' in aws_ec2_ami) and
     (_aws_ec2_ami_facts_intermediate.images == []) and
     (_aws_ec2_ami_facts_target.images == []))
    or
    (('kms_key_alias' not in aws_ec2_ami) and
     (_aws_ec2_ami_facts_target.images == []))

- name: add AMI to to-be-encrypted list (if applicable, if target doesn't exist)
  set_fact:
    _aws_ec2_ami_amis_to_encrypt: >-
      {{ _aws_ec2_ami_amis_to_encrypt
         | default([])
         | union([_aws_ec2_ami_shortname]) }}
  when: >
    ('kms_key_alias' in aws_ec2_ami) and
    (_aws_ec2_ami_facts_target.images == [])
